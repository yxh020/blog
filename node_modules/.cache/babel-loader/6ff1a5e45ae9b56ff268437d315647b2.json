{"ast":null,"code":"import \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\SHYA\\\\Desktop\\\\blog\\\\src\\\\containers\\\\personal\\\\personal.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useContext, useState, useEffect, useRef } from 'react';\nimport './personal.less';\nimport { nanoid } from 'nanoid';\nimport { getUserInfo } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = _Form.useForm();\n\n  return /*#__PURE__*/_jsxDEV(_Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [_Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n}; // async componentDidMount (){\n//     let id = localStorage.getItem('id') \n//     //console.log(id);\n//     //发送请求\n//     let result = await getUserInfo(id)\n//     if(result!==undefined){\n//         console.log(result);\n//         const {status,data} = result\n//         //console.log(status,data);\n//         if(status===0){\n//             console.log('普通用户');\n//             //普通用户只展示自己的文章\n//             this.setState({textdata:data.textdata})\n//         }else if(status===2){\n//             console.log('管理员账户');\n//             //管理员展示所有文章和所有账户\n//         }else{\n//             message.info('查询失败',1)\n//         }\n//     }else{\n//     //没联网\n//         console.log('没联网');\n//     }\n// }\n// delete = () => {\n//     this.setState({show:!this.state.show})\n// }\n// deleteText = (event) => {\n//     console.log(event.target.parentNode.parentNode);\n// }\n// const textdata = this.state.textdata\n// const {show} = this.state\n// <div className='personal'>\n\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\n{\n  /* <div className=\"personal_text_div\">\r\n                 <p>所有文章</p>\r\n                 <Button className=\"_text_div_delete\" onClick={this.delete}>编辑</Button>\r\n                   {   \r\n                         textdata.map((a) => {\r\n                             return <li key={nanoid()}>{a.title}{'\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0'}{a.date}\r\n                             {show?<Button \r\n                              onClick={this.deleteText}\r\n                              size={'small'}\r\n                              style={{float:'right',marginRight:'10px'}}\r\n                              >\r\n                              删除</Button>:null}\r\n                             </li>\r\n                         })\r\n                     }\r\n                 </div> */\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["C:/Users/SHYA/Desktop/blog/src/containers/personal/personal.jsx"],"names":["React","Component","useContext","useState","useEffect","useRef","nanoid","getUserInfo","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","childNode"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,SAAjD,EAA4DC,MAA5D,QAA0E,OAA1E;AACA,OAAO,iBAAP;AAEA,SAAQC,MAAR,QAAqB,QAArB;AACA,SAAQC,WAAR,QAA0B,WAA1B;;AAEA,MAAMC,eAAe,gBAAGR,KAAK,CAACS,aAAN,CAAoB,IAApB,CAAxB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAyB;AAAA;;AAC3C,QAAM,CAACC,IAAD,IAAS,MAAKC,OAAL,EAAf;;AACA,sBACE;AAAM,IAAA,IAAI,EAAED,IAAZ;AAAkB,IAAA,SAAS,EAAE,KAA7B;AAAA,2BACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,MAAA,KAAK,EAAEA,IAAjC;AAAA,6BACE,mBAAQD;AAAR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CATD;;GAAMF,W;UACW,MAAKI,O;;;KADhBJ,W;;AAWN,MAAMK,YAAY,GAAG,CAAC;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,QAFoB;AAGpBC,EAAAA,QAHoB;AAIpBC,EAAAA,SAJoB;AAKpBC,EAAAA,MALoB;AAMpBC,EAAAA,UANoB;AAOpB,KAAGC;AAPiB,CAAD,KAQf;AAAA;;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMsB,QAAQ,GAAGpB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMQ,IAAI,GAAGX,UAAU,CAACM,eAAD,CAAvB;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,OAAJ,EAAa;AACXE,MAAAA,QAAQ,CAACC,OAAT,CAAiBC,KAAjB;AACD;AACF,GAJQ,EAIN,CAACJ,OAAD,CAJM,CAAT;;AAMA,QAAMK,UAAU,GAAG,MAAM;AACvBJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACAV,IAAAA,IAAI,CAACgB,cAAL,CAAoB;AAClB,OAACV,SAAD,GAAaC,MAAM,CAACD,SAAD;AADD,KAApB;AAGD,GALD;;AAQA,sBAAO,mBAAQG,SAAR;AAAA,cAAoBQ;AAApB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA3BD,C,CA8BI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IA/DEf,Y;;MAAAA,Y;AAkEN;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAA0B","sourcesContent":["import React, { Component, useContext, useState, useEffect, useRef } from 'react'\r\nimport './personal.less'\r\nimport {message, Table, Input, Button, Popconfirm, Form } from 'antd'\r\nimport {nanoid} from 'nanoid'\r\nimport {getUserInfo} from '../../api'\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\n\r\n    // async componentDidMount (){\r\n    //     let id = localStorage.getItem('id') \r\n    //     //console.log(id);\r\n    //     //发送请求\r\n    //     let result = await getUserInfo(id)\r\n    //     if(result!==undefined){\r\n    //         console.log(result);\r\n    //         const {status,data} = result\r\n    //         //console.log(status,data);\r\n    //         if(status===0){\r\n    //             console.log('普通用户');\r\n    //             //普通用户只展示自己的文章\r\n    //             this.setState({textdata:data.textdata})\r\n    //         }else if(status===2){\r\n    //             console.log('管理员账户');\r\n    //             //管理员展示所有文章和所有账户\r\n    //         }else{\r\n    //             message.info('查询失败',1)\r\n    //         }\r\n    //     }else{\r\n    //     //没联网\r\n    //         console.log('没联网');\r\n    //     }\r\n        \r\n    // }\r\n    // delete = () => {\r\n    //     this.setState({show:!this.state.show})\r\n    // }\r\n    // deleteText = (event) => {\r\n    //     console.log(event.target.parentNode.parentNode);\r\n    // }\r\n    // const textdata = this.state.textdata\r\n    // const {show} = this.state\r\n    // <div className='personal'>\r\n  \r\n\r\n{/* <div className=\"personal_text_div\">\r\n                <p>所有文章</p>\r\n                <Button className=\"_text_div_delete\" onClick={this.delete}>编辑</Button>\r\n                  {   \r\n                        textdata.map((a) => {\r\n                            return <li key={nanoid()}>{a.title}{'\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0'}{a.date}\r\n                            {show?<Button \r\n                             onClick={this.deleteText}\r\n                             size={'small'}\r\n                             style={{float:'right',marginRight:'10px'}}\r\n                             >\r\n                             删除</Button>:null}\r\n                            </li>\r\n                        })\r\n                    }\r\n                </div> */}"]},"metadata":{},"sourceType":"module"}