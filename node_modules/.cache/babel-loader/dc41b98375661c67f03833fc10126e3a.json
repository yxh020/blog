{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/popconfirm/style\";\nimport _Popconfirm from \"antd/es/popconfirm\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\SHYA\\\\Desktop\\\\blog\\\\src\\\\containers\\\\personal\\\\personal.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useContext, useState, useEffect, useRef } from 'react';\nimport './personal.less';\nimport { nanoid } from 'nanoid';\nimport { getUserInfo } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = _Form.useForm();\n\n  return /*#__PURE__*/_jsxDEV(_Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [_Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(_Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(_Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\nexport default class personal extends Component {\n  async componentDidMount() {\n    let id = localStorage.getItem('id'); //console.log(id);\n    //发送请求\n\n    let result = await getUserInfo(id);\n\n    if (result !== undefined) {\n      console.log(result);\n      const {\n        status,\n        data\n      } = result; //console.log(status,data);\n\n      if (status === 0) {\n        console.log('普通用户'); //普通用户只展示自己的文章\n\n        this.setState({\n          textdata: data.textdata\n        });\n      } else if (status === 2) {\n        console.log('管理员账户'); //管理员展示所有文章和所有账户\n      } else {\n        _message.info('查询失败', 1);\n      }\n    } else {\n      //没联网\n      console.log('没联网');\n    }\n  } // delete = () => {\n  //     this.setState({show:!this.state.show})\n  // }\n  // deleteText = (event) => {\n  //     console.log(event.target.parentNode.parentNode);\n  // }\n  // const textdata = this.state.textdata\n  // const {show} = this.state\n  // <div className='personal'>\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n      data: [],\n      textdata: []\n    };\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource\n      } = this.state;\n      const newData = {\n        key: count,\n        name: `Edward King ${count}`,\n        age: '32',\n        address: `London, Park Lane no. ${count}`\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age'\n    }, {\n      title: 'address',\n      dataIndex: 'address'\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_, record) => this.state.dataSource.length >= 1 ? /*#__PURE__*/_jsxDEV(_Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => this.handleDelete(record.key),\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this) : null\n    }];\n    this.state = {\n      dataSource: [{\n        key: '0',\n        name: 'Edward King 0',\n        age: '32',\n        address: 'London, Park Lane no. 0'\n      }, {\n        key: '1',\n        name: 'Edward King 1',\n        age: '32',\n        address: 'London, Park Lane no. 1'\n      }],\n      count: 2\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(_Button, {\n        onClick: this.handleAdd,\n        type: \"primary\",\n        style: {\n          marginBottom: 16\n        },\n        children: \"Add a row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(_Table, {\n        components: components,\n        rowClassName: () => 'editable-row',\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n{\n  /* <div className=\"personal_text_div\">\r\n                 <p>所有文章</p>\r\n                 <Button className=\"_text_div_delete\" onClick={this.delete}>编辑</Button>\r\n                   {   \r\n                         textdata.map((a) => {\r\n                             return <li key={nanoid()}>{a.title}{'\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0'}{a.date}\r\n                             {show?<Button \r\n                              onClick={this.deleteText}\r\n                              size={'small'}\r\n                              style={{float:'right',marginRight:'10px'}}\r\n                              >\r\n                              删除</Button>:null}\r\n                             </li>\r\n                         })\r\n                     }\r\n                 </div> */\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["C:/Users/SHYA/Desktop/blog/src/containers/personal/personal.jsx"],"names":["React","Component","useContext","useState","useEffect","useRef","nanoid","getUserInfo","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","personal","componentDidMount","id","localStorage","getItem","result","undefined","status","data","setState","textdata","info","constructor","state","show","handleDelete","key","dataSource","filter","item","handleAdd","count","newData","name","age","address","row","findIndex","splice","columns","width","render","_","length","components","body","cell","map","col","onCell","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component, useContext, useState, useEffect, useRef } from 'react'\r\nimport './personal.less'\r\nimport {message, Table, Input, Button, Popconfirm, Form } from 'antd'\r\nimport {nanoid} from 'nanoid'\r\nimport {getUserInfo} from '../../api'\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\n\r\nexport default class personal extends Component {\r\n    state={\r\n        show:false,\r\n        data:[],\r\n        textdata:[]\r\n    }\r\n\r\n    async componentDidMount (){\r\n        let id = localStorage.getItem('id') \r\n        //console.log(id);\r\n        //发送请求\r\n        let result = await getUserInfo(id)\r\n        if(result!==undefined){\r\n            console.log(result);\r\n            const {status,data} = result\r\n            //console.log(status,data);\r\n            if(status===0){\r\n                console.log('普通用户');\r\n                //普通用户只展示自己的文章\r\n                this.setState({textdata:data.textdata})\r\n            }else if(status===2){\r\n                console.log('管理员账户');\r\n                //管理员展示所有文章和所有账户\r\n            }else{\r\n                message.info('查询失败',1)\r\n            }\r\n        }else{\r\n        //没联网\r\n            console.log('没联网');\r\n        }\r\n        \r\n    }\r\n    // delete = () => {\r\n    //     this.setState({show:!this.state.show})\r\n    // }\r\n    // deleteText = (event) => {\r\n    //     console.log(event.target.parentNode.parentNode);\r\n    // }\r\n    // const textdata = this.state.textdata\r\n    // const {show} = this.state\r\n    // <div className='personal'>\r\n    constructor(props) {\r\n        super(props);\r\n        this.columns = [\r\n          {\r\n            title: 'name',\r\n            dataIndex: 'name',\r\n            width: '30%',\r\n            editable: true,\r\n          },\r\n          {\r\n            title: 'age',\r\n            dataIndex: 'age',\r\n          },\r\n          {\r\n            title: 'address',\r\n            dataIndex: 'address',\r\n          },\r\n          {\r\n            title: 'operation',\r\n            dataIndex: 'operation',\r\n            render: (_, record) =>\r\n              this.state.dataSource.length >= 1 ? (\r\n                <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\r\n                  <a>Delete</a>\r\n                </Popconfirm>\r\n              ) : null,\r\n          },\r\n        ];\r\n        this.state = {\r\n          dataSource: [\r\n            {\r\n              key: '0',\r\n              name: 'Edward King 0',\r\n              age: '32',\r\n              address: 'London, Park Lane no. 0',\r\n            },\r\n            {\r\n              key: '1',\r\n              name: 'Edward King 1',\r\n              age: '32',\r\n              address: 'London, Park Lane no. 1',\r\n            },\r\n          ],\r\n          count: 2,\r\n        };\r\n      }\r\n    handleDelete = (key) => {\r\n        const dataSource = [...this.state.dataSource];\r\n        this.setState({\r\n          dataSource: dataSource.filter((item) => item.key !== key),\r\n        });\r\n      };\r\n      handleAdd = () => {\r\n        const { count, dataSource } = this.state;\r\n        const newData = {\r\n          key: count,\r\n          name: `Edward King ${count}`,\r\n          age: '32',\r\n          address: `London, Park Lane no. ${count}`,\r\n        };\r\n        this.setState({\r\n          dataSource: [...dataSource, newData],\r\n          count: count + 1,\r\n        });\r\n      };\r\n      handleSave = (row) => {\r\n        const newData = [...this.state.dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        this.setState({\r\n          dataSource: newData,\r\n        });\r\n      };  \r\n\r\n\r\n    render() {\r\n        const { dataSource } = this.state;\r\n        const components = {\r\n          body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n          },\r\n        };\r\n        const columns = this.columns.map((col) => {\r\n          if (!col.editable) {\r\n            return col;\r\n          }\r\n    \r\n          return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n              record,\r\n              editable: col.editable,\r\n              dataIndex: col.dataIndex,\r\n              title: col.title,\r\n              handleSave: this.handleSave,\r\n            }),\r\n          };\r\n        });\r\n        return (\r\n          <div>\r\n            <Button\r\n              onClick={this.handleAdd}\r\n              type=\"primary\"\r\n              style={{\r\n                marginBottom: 16,\r\n              }}\r\n            >\r\n              Add a row\r\n            </Button>\r\n            <Table\r\n              components={components}\r\n              rowClassName={() => 'editable-row'}\r\n              bordered\r\n              dataSource={dataSource}\r\n              columns={columns}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n\r\n{/* <div className=\"personal_text_div\">\r\n                <p>所有文章</p>\r\n                <Button className=\"_text_div_delete\" onClick={this.delete}>编辑</Button>\r\n                  {   \r\n                        textdata.map((a) => {\r\n                            return <li key={nanoid()}>{a.title}{'\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0'}{a.date}\r\n                            {show?<Button \r\n                             onClick={this.deleteText}\r\n                             size={'small'}\r\n                             style={{float:'right',marginRight:'10px'}}\r\n                             >\r\n                             删除</Button>:null}\r\n                            </li>\r\n                        })\r\n                    }\r\n                </div> */}"]},"metadata":{},"sourceType":"module"}